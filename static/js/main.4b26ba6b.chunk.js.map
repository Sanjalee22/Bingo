{"version":3,"sources":["util/constants.js","util/utilities.js","util/bingo.jfif","components/Ticket.js","components/EditPlayers.js","components/GenerateCityNames.js","components/DisplayCalledNames.js","components/App.js","index.js"],"names":["allElements","possibleWinningCombo","generateRandomSequence","allElementsClone","randomNumbersArray","i","random","Math","floor","length","push","splice","initialTicketState","Array","fill","Ticket","ticketElements","calledCities","useState","bingoElements","setBingoElements","ticketState","setTicketState","onElementClick","index","isCalled","currentTicket","result","updatedTicketState","includes","a","b","c","d","e","checkBingo","isBingoElement","isLastForBingo","className","map","element","src","BingoImage","alt","onClick","EditPlayers","changeTotalPlayers","numberOfPlayers","setNumberOfPlayers","type","min","value","onChange","target","data-testid","preventDefault","GenerateCityNames","updateCalledCities","cityNameList","setCityNameList","DisplayCalledNames","calledCityNames","currentName","pastNames","slice","name","App","totalPlayers","setTotalPlayers","tickets","setTickets","setCalledCities","useEffect","tempArray","citiesList","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4b26ba6b.chunk.js","sourcesContent":["export const allElements = [\r\n  \"Paris\",\r\n  \"London\",\r\n  \"Rome\",\r\n  \"Florence\",\r\n  \"Barcelona\",\r\n  \"Prague\",\r\n  \"Amsterdam\",\r\n  \"Santorini\",\r\n  \"Zurich\",\r\n  \"Venice\",\r\n  \"Athens\",\r\n  \"Vienna\",\r\n  \"Madrid\",\r\n  \"Stockholm\",\r\n  \"Dublin\",\r\n  \"Budapest\",\r\n  \"Berlin\",\r\n  \"Intanbul\",\r\n  \"Lisbon\",\r\n  \"Edinburgh\",\r\n  \"Munich\",\r\n  \"St. Petersburg\",\r\n  \"Lake Como\",\r\n  \"Cyprus\",\r\n  \"Crete\",\r\n  \"Granada\",\r\n  \"Seville\",\r\n  \"Reykjavik\",\r\n  \"Tallinn\",\r\n];\r\n\r\nexport const possibleWinningCombo = [\r\n  //rows\r\n  [0, 1, 2, 3, 4],\r\n  [5, 6, 7, 8, 9],\r\n  [10, 11, 12, 13, 14],\r\n  [15, 16, 17, 18, 19],\r\n  [20, 21, 22, 23, 24],\r\n\r\n  //columns\r\n  [0, 5, 10, 15, 20],\r\n  [1, 6, 11, 16, 21],\r\n  [2, 7, 12, 17, 22],\r\n  [3, 8, 13, 18, 23],\r\n  [4, 9, 14, 19, 24],\r\n\r\n  //diagonal\r\n  [0, 6, 12, 18, 24],\r\n  [4, 8, 12, 16, 20],\r\n];\r\n\r\nexport const ticketSize = 25;\r\n","import { allElements, possibleWinningCombo, ticketSize } from \"./constants\";\r\n\r\n//Generate random sequence of elements for a ticket\r\nexport const generateRandomSequence = () => {\r\n  var allElementsClone = [...allElements];\r\n  var randomNumbersArray = [];\r\n\r\n  for (var i = 0; i < ticketSize; ++i) {\r\n    var random = Math.floor(Math.random() * allElementsClone.length);\r\n    randomNumbersArray.push(allElementsClone[random]);\r\n    allElementsClone.splice(random, 1);\r\n  }\r\n\r\n  allElementsClone = [];\r\n\r\n  return randomNumbersArray;\r\n};\r\n\r\n//Iterates through the ticket and checks if all indices in any of the winning\r\n//combo has been marked. If yes, return that combo. \r\n//If only one index out of the possible winning index is unmarked, return the unmarked index\r\nexport const checkBingo = (updatedTicketState, index) => {\r\n  for (let i = 0; i < possibleWinningCombo.length; ++i) {\r\n    if (possibleWinningCombo[i].includes(index)) {\r\n      const [a, b, c, d, e] = possibleWinningCombo[i];\r\n      if (\r\n        updatedTicketState[a] &&\r\n        updatedTicketState[b] &&\r\n        updatedTicketState[c] &&\r\n        updatedTicketState[d] &&\r\n        updatedTicketState[e]\r\n      )\r\n        return possibleWinningCombo[i];\r\n      if (\r\n        !updatedTicketState[a] &&\r\n        updatedTicketState[b] &&\r\n        updatedTicketState[c] &&\r\n        updatedTicketState[d] &&\r\n        updatedTicketState[e]\r\n      )\r\n        return [a];\r\n      if (\r\n        !updatedTicketState[b] &&\r\n        updatedTicketState[a] &&\r\n        updatedTicketState[c] &&\r\n        updatedTicketState[d] &&\r\n        updatedTicketState[e]\r\n      )\r\n        return [b];\r\n      if (\r\n        !updatedTicketState[c] &&\r\n        updatedTicketState[a] &&\r\n        updatedTicketState[b] &&\r\n        updatedTicketState[d] &&\r\n        updatedTicketState[e]\r\n      )\r\n        return [c];\r\n      if (\r\n        !updatedTicketState[d] &&\r\n        updatedTicketState[a] &&\r\n        updatedTicketState[b] &&\r\n        updatedTicketState[c] &&\r\n        updatedTicketState[d]\r\n      )\r\n        return [d];\r\n      if (\r\n        !updatedTicketState[e] &&\r\n        updatedTicketState[b] &&\r\n        updatedTicketState[c] &&\r\n        updatedTicketState[d] &&\r\n        updatedTicketState[a]\r\n      )\r\n        return [e];\r\n    }\r\n  }\r\n  return null;\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bingo.e5457bdf.jfif\";","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { checkBingo } from \"../util/utilities\";\r\nimport BingoImage from \"../util/bingo.jfif\";\r\nimport { ticketSize } from \"../util/constants\";\r\nimport \"../styles/ticket.css\";\r\n\r\nconst CENTER_INDEX = 12;\r\nconst initialTicketState = Array(ticketSize).fill(false);\r\n//We need to show 'Bingo' image at center. Hence setting this index true by default\r\ninitialTicketState[CENTER_INDEX] = true;\r\n\r\nconst Ticket = ({ ticketElements, calledCities }) => {\r\n  //list of elements part of the bingo winning combination\r\n  const [bingoElements, setBingoElements] = useState([]);\r\n\r\n  //stores true or false for each index in the ticket. If element is called and clicked,\r\n  //the corresponding index in ticketState is set to true.\r\n  const [ticketState, setTicketState] = useState(initialTicketState);\r\n\r\n  //mark the clicked index as checked/true only if the clicked element is the current\r\n  //called element or has been called.\r\n  const onElementClick = (index, isCalled) => {\r\n    if (isCalled) {\r\n      const currentTicket = [...ticketState];\r\n      currentTicket[index] = true;\r\n      setTicketState(currentTicket);\r\n      const result = checkBingo(currentTicket, index);\r\n      setBingoElements(result);\r\n    }\r\n  };\r\n\r\n  const isBingoElement = (index) => {\r\n    return bingoElements != null &&\r\n      bingoElements.length !== 1 &&\r\n      bingoElements.includes(index)\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  const isLastForBingo = (index) => {\r\n    return bingoElements != null &&\r\n      bingoElements.length === 1 &&\r\n      bingoElements.includes(index)\r\n      ? true\r\n      : false;\r\n  };\r\n\r\n  const showTicketElements = () => {\r\n    return ticketElements.map((element, index) => {\r\n      const isCalled = calledCities.includes(ticketElements[index]);\r\n      //render bingo image at ticket's center\r\n      if (index === CENTER_INDEX)\r\n        return (\r\n          <div className=\"element\" key={index}>\r\n            <img className=\"fittedImage\" src={BingoImage} alt=\"Bingo\" />\r\n          </div>\r\n        );\r\n      return (\r\n        <div\r\n          key={index}\r\n          className={`element ${isCalled ? \"generated\" : \"\"} ${\r\n            ticketState[index] ? \"clicked\" : \"\"\r\n          } ${isBingoElement(index) ? \"shake\" : \"\"} ${\r\n            isLastForBingo(index) ? \"change-color\" : \"\"\r\n          }`}\r\n          onClick={() => onElementClick(index, isCalled)}\r\n        >\r\n          {element}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <div className=\"grid container\">{showTicketElements()}</div>;\r\n};\r\n\r\nTicket.propTypes = {\r\n  ticketElements: PropTypes.array,\r\n  calledCities: PropTypes.array,\r\n};\r\n\r\nexport default Ticket;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../styles/editPlayers.css\";\r\n\r\nconst DEFAULT_NUMBER_OF_PLAYERS = 1;\r\n\r\nconst EditPlayers = ({ changeTotalPlayers }) => {\r\n  const [numberOfPlayers, setNumberOfPlayers] = useState(\r\n    DEFAULT_NUMBER_OF_PLAYERS\r\n  );\r\n\r\n  const onFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    changeTotalPlayers(numberOfPlayers);\r\n  };\r\n\r\n  const onInputTextChange = (e) => {\r\n    setNumberOfPlayers(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form>\r\n        <div className=\"margined\">\r\n          <label className=\"text gray-text\">Number of players: </label>\r\n        </div>\r\n\r\n        <input\r\n          className=\"inputText\"\r\n          type=\"number\"\r\n          min={1}\r\n          value={numberOfPlayers}\r\n          onChange={onInputTextChange}\r\n          data-testid=\"numberInput\"\r\n        />\r\n\r\n        <button className=\"button text gray-text bold\" onClick={onFormSubmit}>\r\n          Show Tickets\r\n        </button>\r\n        <hr />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nEditPlayers.propTypes = {\r\n  changeTotalPlayers: PropTypes.func,\r\n};\r\n\r\nexport default EditPlayers;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { allElements } from \"../util/constants\";\r\n\r\nconst GenerateCityNames = ({ updateCalledCities }) => {\r\n  const [cityNameList, setCityNameList] = useState([...allElements]);\r\n\r\n  const onButtonClick = () => {\r\n    if (cityNameList.length === 0) updateCalledCities(\"That was all we had...\");\r\n    else {\r\n      const allElementsClone = [...cityNameList];\r\n      const random = Math.floor(Math.random() * allElementsClone.length);\r\n      updateCalledCities(allElementsClone[random]);\r\n      allElementsClone.splice(random, 1);\r\n      setCityNameList(allElementsClone);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <button className=\"button text bold\" onClick={onButtonClick}>\r\n        Pick a City\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nGenerateCityNames.propTypes = {\r\n  updateCalledCities: PropTypes.func,\r\n};\r\n\r\nexport default GenerateCityNames;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../styles/displayCalledNames.css\";\r\n\r\nconst DisplayCalledNames = ({ calledCityNames }) => {\r\n  //last element in calledCityNames array is the current called name\r\n  const currentName = calledCityNames[calledCityNames.length - 1];\r\n  const pastNames = calledCityNames.slice(0, calledCityNames.length - 1);\r\n  return (\r\n    <div>\r\n      <div>\r\n        <label className=\"container text gray-text bold\">{currentName}</label>\r\n      </div>\r\n      <div>\r\n        <ul className=\"noBullets\">\r\n          {pastNames.map((name) => {\r\n            if (name === \"That was all we had...\") return null;\r\n            return (\r\n              <li key={name} className=\"list-elements text light-gray-text\">\r\n                {name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDisplayCalledNames.propTypes = {\r\n  calledCityNames: PropTypes.array,\r\n};\r\n\r\nexport default DisplayCalledNames;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Ticket from \"./Ticket\";\r\nimport EditPlayers from \"./EditPlayers\";\r\nimport GenerateCityNames from \"./GenerateCityNames\";\r\nimport DisplayCalledNames from \"./DisplayCalledNames\";\r\nimport { generateRandomSequence } from \"../util/utilities\";\r\nimport \"../styles/app.css\";\r\n\r\nconst DEFAULT_NUMBER_OF_PLAYERS = 1;\r\n\r\nconst App = () => {\r\n  const [totalPlayers, setTotalPlayers] = useState(DEFAULT_NUMBER_OF_PLAYERS);\r\n\r\n  //maintain ticket for each player\r\n  const [tickets, setTickets] = useState([]);\r\n\r\n  //maintain a list of the city names whicj have been called.\r\n  const [calledCities, setCalledCities] = useState([]);\r\n\r\n  //generate a different ticket for each player which should remain the same if app re-renders\r\n  useEffect(() => {\r\n    const tempArray = [];\r\n    for (let i = 0; i < totalPlayers; i++) {\r\n      const ticketElements = generateRandomSequence();\r\n      tempArray.push(ticketElements);\r\n    }\r\n    setTickets([...tempArray]);\r\n  }, [totalPlayers]);\r\n\r\n  const updateCalledCities = (e) => {\r\n    setCalledCities([...calledCities, e]);\r\n  };\r\n\r\n  const renderTickets = () => {\r\n    return tickets.map((citiesList, index) => {\r\n      return (\r\n        <Ticket\r\n          key={index}\r\n          ticketElements={citiesList}\r\n          calledCities={calledCities}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"heading\">Traveller's Bingo!</h1>\r\n      <div className=\"flex-container\">\r\n        <div className=\"flex-item-left container colored margined\">\r\n          <EditPlayers changeTotalPlayers={setTotalPlayers} />\r\n          <GenerateCityNames updateCalledCities={updateCalledCities} />\r\n          <DisplayCalledNames calledCityNames={calledCities} />\r\n        </div>\r\n        <div className=\"flex-item-right\">{renderTickets()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./styles/style.css\";\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));"],"sourceRoot":""}